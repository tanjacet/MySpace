/*package presence.demo;
import com.microsoft.graph.models.Presence;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

@Service
public class PresenceService {
  private final PresenceServiceDemo demoPresenceService;
  private final Map<String, Long> presenceDurations = new HashMap<>();
  private LocalDateTime lastCheckTime = LocalDateTime.now();

  @Autowired
  public PresenceService(PresenceServiceDemo demoPresenceService) {
    this.demoPresenceService = demoPresenceService;
  }

  //@Scheduled(fixedRate = 300000) // Every 5 minutes
  @Scheduled(fixedRate = 60000) // Every 1 minute
  public void fetchPresenceData() {
    int retries = 10;

    for (int i = 0; i < retries; i++) {
      Presence presence = demoPresenceService.getDemoPresence();

      String presenceStatus = presence.availability;

      LocalDateTime now = LocalDateTime.now();
      long timeSpent = java.time.Duration.between(lastCheckTime, now).toSeconds();
      presenceDurations.merge(presenceStatus, timeSpent, Long::sum);

      lastCheckTime = now;
      System.out.println("Presence Status: " + presenceStatus);
      // Simulate a delay for the next retry
      try {
        Thread.sleep(500); // 500 milliseconds delay between retries
      } catch (InterruptedException e) {
        Thread.currentThread().interrupt();
        System.out.println("Thread interrupted!");
      }
    }

    System.out.println("Total Presence Durations After 10 Retries: ");
    presenceDurations.forEach((status, duration) -> {
      long minutes = TimeUnit.SECONDS.toMinutes(duration);
      System.out.println(status + "=" + minutes + "min");
    });
  }
}


---
  package presence.demo;

import com.microsoft.graph.models.Presence;
import org.springframework.stereotype.Service;

@Service
public class PresenceServiceDemo {

  public Presence getDemoPresence() {
    Presence presence = new Presence();
    presence.availability = PresenceStatus.getRandomStatus().getStatus();
    return presence;
  }
}
---
  package presence.demo;

import java.util.Random;

public enum PresenceStatus {
  AVAILABLE("available"),
  AWAY("away"),
  BUSY("busy"),
  DO_NOT_DISTURB("doNotDisturb"),
  OFFLINE("offline"),
  UNKNOWN("unknown");

  private final String status;

  PresenceStatus(String status) {
    this.status = status;
  }

  public String getStatus() {
    return status;
  }

  public static PresenceStatus
  getRandomStatus() {
    PresenceStatus [] statuses = values();
    int randomIndex = new Random().nextInt(statuses.length);
    return statuses[randomIndex];
  }
}

----
  package presence;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.scheduling.annotation.EnableScheduling;

@SpringBootApplication
@EnableScheduling
public class TeamsActivityApplication {

  public static void main(String[] args) {
    SpringApplication.run(TeamsActivityApplication.class, args);
  }
}

----
  import com.azure.identity.ClientSecretCredential;
import com.azure.identity.ClientSecretCredentialBuilder;
import com.microsoft.graph.authentication.TokenCredentialAuthProvider;
import com.microsoft.graph.models.UserActivity;
import com.microsoft.graph.requests.GraphServiceClient;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.*;

@Service
public class ActivityService {

  private final GraphServiceClient<?> graphClient;
  private final Map<String, Long> activityDurations = new HashMap<>();
  private LocalDateTime lastActivityCheckTime = LocalDateTime.now();

  public ActivityService(@Value("${graph.client-id}") String clientId,
                         @Value("${graph.tenant-id}") String tenantId,
                         @Value("${graph.client-secret}") String clientSecret) {

    ClientSecretCredential clientSecretCredential = new ClientSecretCredentialBuilder()
        .clientId(clientId)
        .clientSecret(clientSecret)
        .tenantId(tenantId)
        .build();

    TokenCredentialAuthProvider authProvider = new TokenCredentialAuthProvider(
        Collections.singletonList("https://graph.microsoft.com/.default"),
        clientSecretCredential
    );

    graphClient = GraphServiceClient.builder()
        .authenticationProvider(authProvider)
        .buildClient();
  }

  @Scheduled(fixedRate = 300000) // Every 5 minutes
  public void fetchActivityData() {
    // Fetch the activities
    List<UserActivity> activities = Objects.requireNonNull(graphClient.me().activities().buildRequest().get()).getCurrentPage();

    LocalDateTime now = LocalDateTime.now();
    long timeSpent = java.time.Duration.between(lastActivityCheckTime, now).toMinutes();

    for (UserActivity activity : activities) {
      activityDurations.merge(activity.appActivityId, timeSpent, Long::sum);
    }

    lastActivityCheckTime = now;

    // Output the current totals
    System.out.println("Activity Durations: " + activityDurations);
  }
}

---
  import com.azure.identity.ClientSecretCredential;
import com.azure.identity.ClientSecretCredentialBuilder;
import com.microsoft.graph.authentication.TokenCredentialAuthProvider;
import com.microsoft.graph.models.Presence;
import com.microsoft.graph.requests.GraphServiceClient;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Collections;

@Service
public class PresenceService {

  private final GraphServiceClient<?> graphClient;

  private final Map<String, Long> presenceDurations = new HashMap<>();
  private LocalDateTime lastCheckTime = LocalDateTime.now();

  public PresenceService(@Value("${graph.client-id}") String clientId,
                         @Value("${graph.tenant-id}") String tenantId,
                         @Value("${graph.client-secret}") String clientSecret) {

    ClientSecretCredential clientSecretCredential = new ClientSecretCredentialBuilder()
        .clientId(clientId)
        .clientSecret(clientSecret)
        .tenantId(tenantId)
        .build();

    TokenCredentialAuthProvider authProvider = new TokenCredentialAuthProvider(
        Collections.singletonList("https://graph.microsoft.com/.default"),
        clientSecretCredential
    );

    graphClient = GraphServiceClient.builder()
        .authenticationProvider(authProvider)
        .buildClient();
  }

  @Scheduled(fixedRate = 300000) // Every 5 minutes
  public void fetchPresenceData() {
    Presence presence = graphClient.me().presence().buildRequest().get();

    String presenceStatus = presence.availability;

    LocalDateTime now = LocalDateTime.now();
    long timeSpent = java.time.Duration.between(lastCheckTime, now).toMinutes();
    presenceDurations.merge(presenceStatus, timeSpent, Long::sum);

    lastCheckTime = now;

    // Output the current totals
    System.out.println("Presence Status: " + presenceStatus);
    System.out.println("Presence Durations: " + presenceDurations);
  }
}


---
  graph.client-id=YOUR_CLIENT_ID
graph.tenant-id=YOUR_TENANT_ID
graph.client-secret=YOUR_CLIENT_SECRET
  ---
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>skills.java</groupId>
  <artifactId>PresenceActivityTry</artifactId>
  <version>1.0-SNAPSHOT</version>
  <name>Archetype - PresenceActivityTry</name>
  <url>http://maven.apache.org</url>

  <dependencies>
  <dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter</artifactId>
    <version>3.3.2</version>
  </dependency>
  <dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
    <version>3.3.2</version>
  </dependency>
  <dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-autoconfigure</artifactId>
    <version>3.3.2</version>
  </dependency>
  <dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-test</artifactId>
    <version>3.3.2</version>
    <scope>test</scope>
  </dependency>
  <dependency>
    <groupId>com.microsoft.graph</groupId>
    <artifactId>microsoft-graph</artifactId>
    <version>5.80.0</version>
  </dependency>
  <dependency>
    <groupId>com.azure</groupId>
    <artifactId>azure-identity</artifactId>
    <version>1.13.0</version>
    <scope>compile</scope>
  </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>5.0.0</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <build>
  <plugins>
    <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-compiler-plugin</artifactId>
      <version>3.8.1</version>
      <configuration>
        <source>17</source>
        <target>17</target>
      </configuration>
    </plugin>
  </plugins>
</build>
</project>


package com.example.teamsactivity.model;

import java.util.Random;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public enum PresenceStatus {

    AVAILABLE("available", 10),
    AWAY("away", 3),
    BUSY("busy", 1),
    DO_NOT_DISTURB("doNotDisturb", 1),
    OFFLINE("offline", 2),
    UNKNOWN("unknown", 0);

    private final String status;
    private final int weight;

    PresenceStatus(String status, int weight) {
        this.status = status;
        this.weight = weight;
    }

    public String getStatus() {
        return status;
    }

    public int getWeight() {
        return weight;
    }

    /**
     * Get the enum constant from the string status.
     * 
     * @param status the string representation of the status
     * @return the corresponding PresenceStatus, or UNKNOWN if not found
     */
    public static PresenceStatus fromStatus(String status) {
        for (PresenceStatus presenceStatus : values()) {
            if (presenceStatus.getStatus().equalsIgnoreCase(status)) {
                return presenceStatus;
            }
        }
        return UNKNOWN;
    }

    /**
     * Selects a random presence status based on their weights.
     * 
     * @return a random PresenceStatus based on weights
     */
    public static PresenceStatus getRandomWeightedStatus() {
        List<PresenceStatus> statuses = Arrays.stream(values())
                .filter(status -> status.getWeight() > 0) // Ignore UNKNOWN with 0 weight
                .flatMap(status -> Arrays.stream(new PresenceStatus[status.getWeight()])
                                         .map(s -> status))
                .collect(Collectors.toList());

        Random random = new Random();
        return statuses.get(random.nextInt(statuses.size()));
    }
}

  */
