WITH cl AS (
    SELECT bo.rel_id, bo.cl_id, bo.rel_role, cp.cl_id AS cl_id_cp
    FROM table1 bo
    JOIN table1 cp
        ON bo.rel_id = cp.rel_id
        AND cp.rel_role = :relRole
        AND cp.TEN = :ten
    WHERE bo.rel_role IN (:roles)
        AND bo.cl_id = :clientId
        AND bo.TEN = :ten
)
SELECT DISTINCT ber.client_id, ber.level_cc, ber.CONFIRMED_DATE, ber.START_DATE, cl.cl_id_cp
FROM table3 ber
JOIN cl
    ON ber.cl_id = cl.cl_id_cp
ORDER BY ber.level_cc DESC;


Key Changes:
CTE Optimization: Removed redundant columns (bo.rel_role and cp.rel_role) that are not used in the final query. This reduces the amount of data processed and transferred between the CTE and the main query.

Removed ORDER BY in CTE: There is no need to sort the data in the CTE cl, as the final result set is sorted in the outer query by ber.level_cc DESC. Sorting inside a CTE adds unnecessary computation.

Indexing Recommendations:

Ensure that table1 has indexes on rel_id, rel_role, cl_id, and TEN.
Ensure that table3 has indexes on cl_id, client_id, and level_cc to optimize JOIN and ORDER BY performance.
Index Suggestions:
table1 (rel_id, rel_role, TEN)
table3 (cl_id, client_id, level_cc)
These changes should improve the overall query performance by reducing unnecessary sorting, minimizing data in the CTE, and leveraging indexes where appropriate.

WITH cl AS (
    SELECT cp.cl_id AS cl_id_cp
    FROM table1 bo
    JOIN table1 cp
        ON bo.rel_id = cp.rel_id
        AND cp.rel_role = :relRole
        AND cp.TEN = :ten
    WHERE bo.rel_role IN (:roles)
        AND bo.cl_id = :clientId
        AND bo.TEN = :ten
)
SELECT DISTINCT ber.client_id, ber.level_cc, ber.CONFIRMED_DATE, ber.START_DATE, cl.cl_id_cp
FROM table3 ber
JOIN cl
    ON ber.cl_id = cl.cl_id_cp
ORDER BY ber.level_cc DESC;

Key Insight:
Columns used in WHERE or JOIN clauses (like bo.rel_role, bo.cl_id, and bo.rel_id) must be available in the query for those operations but do not need to be selected in the final SELECT list if they are not part of the output.

The only columns you need in the CTE's SELECT list are those that you either:

Need in the final query (e.g., cl.cl_id_cp).
Need for a subsequent JOIN or WHERE condition outside the CTE.
Key Takeaway:
You only need to include columns in the SELECT list if:

They are required in the final result set or the main query after the CTE.
They are necessary for subsequent JOIN conditions outside the CTE.
Columns used for filtering (WHERE) or joining (JOIN) within the CTE itself donâ€™t need to appear in the SELECT list unless they are needed later.


The HTTP request body itself is just a data payload, not a dynamic programming environment. 
To exclude elements from an array, you must manually adjust the array before constructing the HTTP request body 
or handle it in a pre-processing step in whatever system you're using to make the request.
