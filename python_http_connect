import http.client
import json
import ssl

def fetch_data():
    # Server details
    host = "example.com"
    url = "/api/data"
    port = 443  # Standard HTTPS port

    # The payload containing the POST data (filters like limit, skip, sort, etc.)
    payload = {
        "limit": 0,
        "skip": 0,
        "sort": {"id": 1}  # Sorting by ID in ascending order
    }
    json_payload = json.dumps(payload)

    # Custom SSL context to handle certificate verification and client authentication
    context = ssl.create_default_context(cafile="/path/to/ca-bundle.crt")  # Path to CA bundle

    # If client authentication is required, provide the client certificate and key
    context.load_cert_chain(certfile="/path/to/client-cert.pem", keyfile="/path/to/client-key.pem")

    try:
        # Create an HTTPS connection to the server
        conn = http.client.HTTPSConnection(host, port, context=context)

        # Set headers for the request
        headers = {
            "Content-Type": "application/json",
            "Accept": "application/json"
        }

        # Send the POST request with the JSON payload
        conn.request("POST", url, body=json_payload, headers=headers)

        # Get the response from the server
        response = conn.getresponse()

        # Read and decode the response data
        data = response.read().decode('utf-8')

        # Read and decode the raw response
        raw_data = response.read().decode('utf-8')

        # Print the raw response for debugging
        print(f"Raw Response: {raw_data}")

        # Check the status code and print the response
        if response.status == 200:
            json_data = json.loads(data)
            print(json.dumps(json_data, indent=4))  # Pretty-printing the JSON response
        else:
            print(f"Request failed with status code {response.status}")

    except ssl.SSLError as ssl_error:
        print(f"SSL error occurred: {ssl_error}")
    except Exception as e:
        print(f"An error occurred: {e}")
    finally:
        # Always close the connection
        conn.close()

# Run the function to fetch data
fetch_data()



import http.client
import json
import ssl

def fetch_data():
    # Server details
    host = "example.com"  # Replace with your actual host
    url = "/api/data"  # Replace with the correct endpoint
    port = 443  # HTTPS port

    # The payload containing the POST data (filters like limit, skip, sort, etc.)
    payload = {
        "limit": 0,
        "skip": 0,
        "sort": {"id": 1}  # Sorting by ID in ascending order
    }
    
    json_payload = json.dumps(payload)

    # Custom SSL context to handle certificate verification and client authentication
    context = ssl.create_default_context(cafile="/path/to/ca-bundle.crt")  # Path to CA bundle
    
    # If client authentication is required, provide the client certificate and key
    context.load_cert_chain(certfile="/path/to/client-cert.pem", keyfile="/path/to/client-key.pem")
    
    try:
        # Create an HTTPS connection to the server
        conn = http.client.HTTPSConnection(host, port, context=context)

        # Set headers for the request
        headers = {
            "Content-Type": "application/json",  # Ensure the Content-Type is JSON
            "Accept": "application/json"
        }

        # Send the POST request with the JSON payload
        conn.request("POST", url, body=json_payload, headers=headers)

        # Get the response from the server
        response = conn.getresponse()

        # Read and decode the raw response
        raw_data = response.read().decode('utf-8')

        # Print the raw response for debugging
        print(f"Raw Response: {raw_data}")

        # Check the status code
        if response.status == 200:
            try:
                # Try to parse the JSON data
                json_data = json.loads(raw_data)
                print(json.dumps(json_data, indent=4))  # Pretty-printing the JSON response
            except json.JSONDecodeError as json_error:
                print(f"JSON decoding error: {json_error}")
        else:
            print(f"Request failed with status code {response.status}: {raw_data}")

    except ssl.SSLError as ssl_error:
        print(f"SSL error occurred: {ssl_error}")
    except Exception as e:
        print(f"An error occurred: {e}")
    finally:
        # Always close the connection
        conn.close()

# Run the function to fetch data
fetch_data()

import http.client
import json
import ssl

def fetch_data():
    # Server details
    host = "example.com"  # Replace with your actual host
    url = "/api/data"  # Replace with the correct endpoint
    port = 443  # HTTPS port

    # The payload containing the POST data (filters like limit, skip, sort, etc.)
    payload = {
        "limit": 0,
        "skip": 0,
        "sort": {"id": 1}  # Sorting by ID in ascending order
    }
    
    json_payload = json.dumps(payload)

    # Custom SSL context to handle certificate verification and client authentication
    context = ssl.create_default_context(cafile="/path/to/ca-bundle.crt")  # Path to CA bundle
    
    # If client authentication is required, provide the client certificate and key
    context.load_cert_chain(certfile="/path/to/client-cert.pem", keyfile="/path/to/client-key.pem")
    
    try:
        # Create an HTTPS connection to the server
        conn = http.client.HTTPSConnection(host, port, context=context)

        # Set headers for the request
        headers = {
            "Content-Type": "application/json",  # Ensure the Content-Type is JSON
            "Accept": "application/json"
        }

        # Send the POST request with the JSON payload
        conn.request("POST", url, body=json_payload, headers=headers)

        # Get the response from the server
        response = conn.getresponse()

        # Read and decode the raw response
        raw_data = response.read().decode('utf-8')

        # Print the raw response for debugging
        print(f"Raw Response: {raw_data}")

        # Check the status code
        if response.status == 200:
            try:
                # Try to parse the JSON data
                json_data = json.loads(raw_data)
                print(json.dumps(json_data, indent=4))  # Pretty-printing the JSON response
            except json.JSONDecodeError as json_error:
                print(f"JSON decoding error: {json_error}")
                print("Attempting to handle partial/malformed JSON...")

                # Try to find where the valid JSON starts and ends
                json_start = raw_data.find('{')  # Find where JSON starts
                json_end = raw_data.rfind('}')   # Find where JSON ends
                if json_start != -1 and json_end != -1:
                    json_part = raw_data[json_start:json_end + 1]
                    try:
                        json_data = json.loads(json_part)
                        print("Extracted valid JSON:")
                        print(json.dumps(json_data, indent=4))
                    except json.JSONDecodeError as json_partial_error:
                        print(f"Error decoding extracted JSON: {json_partial_error}")
                else:
                    print("Could not find valid JSON in the response.")
        else:
            print(f"Request failed with status code {response.status}: {raw_data}")

    except ssl.SSLError as ssl_error:
        print(f"SSL error occurred: {ssl_error}")
    except Exception as e:
        print(f"An error occurred: {e}")
    finally:
        # Always close the connection
        conn.close()

# Run the function to fetch data
fetch_data()

import http.client
import json
import ssl

def fetch_data():
    # Server details
    host = "example.com"  # Replace with your actual host
    url = "/api/data"  # Replace with the correct endpoint
    port = 443  # HTTPS port

    # The payload containing the POST data (filters like limit, skip, sort, etc.)
    payload = {
        "limit": 0,
        "skip": 0,
        "sort": {"id": 1}  # Sorting by ID in ascending order
    }
    
    json_payload = json.dumps(payload)

    # Custom SSL context to handle certificate verification and client authentication
    context = ssl.create_default_context(cafile="/path/to/ca-bundle.crt")  # Path to CA bundle
    
    # If client authentication is required, provide the client certificate and key
    context.load_cert_chain(certfile="/path/to/client-cert.pem", keyfile="/path/to/client-key.pem")
    
    try:
        # Create an HTTPS connection to the server
        conn = http.client.HTTPSConnection(host, port, context=context)

        # Set headers for the request
        headers = {
            "Content-Type": "application/json",  # Ensure the Content-Type is JSON
            "Accept": "application/json"  # Expecting JSON response
        }

        # Send the POST request with the JSON payload
        conn.request("POST", url, body=json_payload, headers=headers)

        # Get the response from the server
        response = conn.getresponse()

        # Read and decode the raw response
        raw_data = response.read().decode('utf-8')

        # Print the raw response for debugging
        print(f"Raw Response: {raw_data}")

        # Check content type
        content_type = response.getheader('Content-Type')
        print(f"Content-Type: {content_type}")

        # Check if the response is JSON or something else
        if response.status == 200:
            if 'application/json' in content_type:
                try:
                    # Try to parse the JSON data
                    json_data = json.loads(raw_data)
                    print("Parsed JSON response:")
                    print(json.dumps(json_data, indent=4))  # Pretty-printing the JSON response
                except json.JSONDecodeError as json_error:
                    print(f"Error decoding JSON: {json_error}")
            else:
                # The response is not JSON, so print it as is
                print(f"Response is not in JSON format. Raw data:\n{raw_data}")
        else:
            print(f"Request failed with status code {response.status}: {raw_data}")

    except ssl.SSLError as ssl_error:
        print(f"SSL error occurred: {ssl_error}")
    except Exception as e:
        print(f"An error occurred: {e}")
    finally:
        # Always close the connection
        conn.close()

# Run the function to fetch data
fetch_data()



import http.client
import ssl

def fetch_data():
    # Server details
    host = "example.com"  # Replace with your actual host
    url = "/api/data"  # Replace with the correct endpoint
    port = 443  # HTTPS port

    # The payload containing the POST data (filters like limit, skip, sort, etc.)
    payload = {
        "limit": 0,
        "skip": 0,
        "sort": {"id": 1}  # Sorting by ID in ascending order
    }
    
    json_payload = json.dumps(payload)

    # Custom SSL context to handle certificate verification and client authentication
    context = ssl.create_default_context(cafile="/path/to/ca-bundle.crt")  # Path to CA bundle
    
    # If client authentication is required, provide the client certificate and key
    context.load_cert_chain(certfile="/path/to/client-cert.pem", keyfile="/path/to/client-key.pem")
    
    try:
        # Create an HTTPS connection to the server
        conn = http.client.HTTPSConnection(host, port, context=context)

        # Set headers for the request
        headers = {
            "Content-Type": "application/json",  # Ensure the Content-Type is JSON
            "Accept": "application/json"  # Expecting JSON response
        }

        # Send the POST request with the JSON payload
        conn.request("POST", url, body=json_payload, headers=headers)

        # Get the response from the server
        response = conn.getresponse()

        # Read and decode the raw response
        raw_data = response.read()  # Not decoding here, keeping it in raw bytes

        # Print the raw response for debugging
        print(f"Raw Response: {raw_data}")

        # Check if response content type is available
        content_type = response.getheader('Content-Type')
        print(f"Content-Type: {content_type}")

        # Check if the request was successful
        if response.status == 200:
            print("Request successful. Dumping raw data:")
            print(raw_data)  # Dumping raw data (can be bytes)
        else:
            print(f"Request failed with status code {response.status}: {raw_data}")

    except ssl.SSLError as ssl_error:
        print(f"SSL error occurred: {ssl_error}")
    except Exception as e:
        print(f"An error occurred: {e}")
    finally:
        # Always close the connection
        conn.close()

# Run the function to fetch data
fetch_data()



#The HTTP request body itself is just a data payload, not a dynamic programming environment. 
To exclude elements from an array, you must manually adjust the array before constructing the HTTP request body 
or handle it in a pre-processing step in whatever system you're using to make the request.

####

import pandas as pd
from datetime import datetime

# Load the CSV file
data = pd.read_csv('your_file.csv')

# Ensure 'lastUpdated' is treated as a numeric type
data['lastUpdated'] = pd.to_numeric(data['lastUpdated'], errors='coerce')

# Find the newest timestamp in milliseconds
newest_timestamp = data['lastUpdated'].max()

# Convert the timestamp to a datetime object
newest_datetime = datetime.fromtimestamp(newest_timestamp / 1000)

# Print in the desired format yyyymmdd
print(newest_datetime.strftime('%Y%m%d'))
####
from datetime import datetime, timedelta

# Define 'yesterday' as 2024-10-27 00:00:00
yesterday = datetime(2024, 10, 27, 0, 0, 0)
yesterday_ms = int(yesterday.timestamp() * 1000)

# Define 'today' as 2024-10-28 00:00:00
today = datetime(2024, 10, 28, 0, 0, 0)
today_ms = int(today.timestamp() * 1000)

# Print the millisecond values
print("Yesterday (in ms):", yesterday_ms)
print("Today (in ms):", today_ms)


payload = {
    "timeFilter": {
        "gt": yesterday_ms,
        "lt": today_ms
    }
}


from datetime import datetime, timedelta

# Get today's date at 00:00:00
today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
today_ms = int(today.timestamp() * 1000)

# Calculate yesterday's date at 00:00:00
yesterday = today - timedelta(days=1)
yesterday_ms = int(yesterday.timestamp() * 1000)


from datetime import datetime

# Get today's date and format it as yyyy-mm-dd
today = datetime.now().strftime('%Y-%m-%d')

print(today)  # Output example: "2024-12-12"
# Print the millisecond values
print("Yesterday (in ms):", yesterday_ms)
print("Today (in ms):", today_ms)
