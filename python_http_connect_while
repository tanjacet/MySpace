import http.client
import json
import ssl

def fetch_data():
    # Server details
    host = "example.com"  # Replace with your actual host
    url = "/api/data"  # Replace with the correct endpoint
    port = 443  # HTTPS port

    # Pagination parameters
    limit = 3000
    skip = 0
    all_records = []

    # Custom SSL context to handle certificate verification and client authentication
    context = ssl.create_default_context(cafile="/path/to/ca-bundle.crt")  # Path to CA bundle
    
    # If client authentication is required, provide the client certificate and key
    context.load_cert_chain(certfile="/path/to/client-cert.pem", keyfile="/path/to/client-key.pem")

    while True:
        # The payload containing the POST data (filters like limit, skip, sort, etc.)
        payload = {
            "limit": limit,
            "skip": skip,
            "sort": {"id": 1}  # Sorting by ID in ascending order
        }
        
        json_payload = json.dumps(payload)

        try:
            # Create an HTTPS connection to the server
            conn = http.client.HTTPSConnection(host, port, context=context)

            # Set headers for the request
            headers = {
                "Content-Type": "application/json"  # Ensure the Content-Type is JSON
            }

            # Send the POST request with the JSON payload
            conn.request("POST", url, body=json_payload, headers=headers)

            # Get the response from the server
            response = conn.getresponse()

            # Read and decode the raw response
            raw_data = response.read().decode('utf-8')

            # Check the status code
            if response.status == 200:
                try:
                    # Try to parse the JSON data
                    json_data = json.loads(raw_data)
                    
                    # Append the fetched records to the list
                    all_records.extend(json_data)  # Assuming json_data is a list of records

                    # Check if the number of records is less than the limit (last batch)
                    if len(json_data) < limit:
                        break

                    # Increment the skip parameter for the next batch
                    skip += limit

                except json.JSONDecodeError as json_error:
                    print(f"Error decoding JSON: {json_error}")
                    break

            else:
                print(f"Request failed with status code {response.status}: {raw_data}")
                break

        except ssl.SSLError as ssl_error:
            print(f"SSL error occurred: {ssl_error}")
            break
        except Exception as e:
            print(f"An error occurred: {e}")
            break
        finally:
            # Always close the connection
            conn.close()

    # Print or process all fetched records
    print(f"Total records fetched: {len(all_records)}")
    # Uncomment the line below to print all records
    # print(json.dumps(all_records, indent=4))

# Run the function to fetch data
fetch_data()
