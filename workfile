import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import javax.mail.*;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import java.io.FileOutputStream;
import java.util.Properties;

public class EmailSender {
    public static void main(String[] args) {
        try {
        Properties properties = new Properties();
        try (InputStream inputStream = getClass().getClassLoader().getResourceAsStream("application.properties")) {
            properties.load(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }

//it_groups=group1,group2,group3

public enum ValueEnum {
    AA(5), AB(10), AC(15), BA(25), BB(30), BC(35);

    private final int value;

    ValueEnum(int value) {
        this.value = value;
    }

    public int getValue() {
        return value;
    }

    public static ValueEnum fromString(String name) {
        try {
            return ValueEnum.valueOf(name);
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("Invalid value name: " + name);
        }
    }
}

import java.util.EnumMap;
import java.util.Map;

public class Student {
    private final Map<ValueEnum, Integer> values;

    public Student(Map<ValueEnum, Integer> values) {
        this.values = values;
    }

    public int getValue(ValueEnum key) {
        return values.getOrDefault(key, 0);
    }
}

public class Teacher {
    private final Map<ValueEnum, Integer> values;

    public Teacher(Map<ValueEnum, Integer> values) {
        this.values = values;
    }

    public int getValue(ValueEnum key) {
        return values.getOrDefault(key, 0);
    }
}

public class ValueDifferenceCalculator {

    public static Map<ValueEnum, Integer> calculateDifference(Student student, Teacher teacher) {
        Map<ValueEnum, Integer> differences = new EnumMap<>(ValueEnum.class);

        for (ValueEnum key : ValueEnum.values()) {
            int studentValue = student.getValue(key);
            int teacherValue = teacher.getValue(key);
            int difference = studentValue - teacherValue;
            differences.put(key, difference);
        }

        return differences;
    }
}

public static boolean matchesParameter(Properties properties, String parameter) {
        // Get the it_groups property
        String itGroupsString = properties.getProperty("it_groups");

        // Split the it_groups string into an array
        String[] itGroupsArray = itGroupsString.split(",");

        // Convert the array to a list
        List<String> itGroupsList = Arrays.asList(itGroupsArray);

        // Check if the parameter matches one of the array members
        return itGroupsList.contains(parameter);
    }
if (ArrayMatcher.matchesParameter(properties, parameter)) {
            System.out.println("Parameter matches one of the array members");
        } else {
            System.out.println("Parameter does not match any of the array members");
        }

public static String[] getGroups() {
        // Load properties from application.properties file
        Properties properties = loadProperties("application.properties");

        // Get the it_groups property
        String itGroupsString = properties.getProperty("it_groups");

        // Split the it_groups string into an array
        return itGroupsString.split(",");
    }

    private static Properties loadProperties(String fileName) {
        Properties properties = new Properties();
        try (InputStream inputStream = GroupChecker.class.getClassLoader().getResourceAsStream(fileName)) {
            properties.load(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return properties;
    }
// Get the it_groups property
        String itGroupsString = properties.getProperty("it_groups");
        
        // Split the it_groups string into an array
        String[] itGroupsArray = itGroupsString.split(",");
        
        // Convert the array to a list
        List<String> itGroupsList = Arrays.asList(itGroupsArray);
        
        // Check if the parameter matches one of the array members
        String parameter = "group2"; // Change this to your parameter
        if (itGroupsList.contains(parameter)) {
            System.out.println("Parameter matches one of the array members");
        } else {
            System.out.println("Parameter does not match any of the array members");
        }
    }
public static void main(String[] args) {
        Properties properties = loadProperties("application.properties");
        // Use properties here
        String propertyValue = properties.getProperty("property.key");
        System.out.println(propertyValue);
    }

    private static Properties loadProperties(String fileName) {
        Properties properties = new Properties();
        try {
            InputStream inputStream = MatchingMaker.class.getClassLoader().getResourceAsStream(fileName);
            if (inputStream == null) {
                System.err.println("Unable to find " + fileName);
                return properties;
            }
            properties.load(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return properties;
    }

            // Read email addresses from Excel
            Workbook workbook = new XSSFWorkbook(new FileInputStream("emails.xlsx"));
            Sheet sheet = workbook.getSheetAt(0); // Assuming data is in the first sheet

            for (Row row : sheet) {
                Cell studentEmailCell = row.getCell(0); // Assuming student email is in the first column
                Cell professorEmailCell = row.getCell(1); // Assuming professor email is in the second column
                
                String studentEmail = studentEmailCell.getStringCellValue();
                String professorEmail = professorEmailCell.getStringCellValue();
                
                // Generate PDF file
                String pdfFilePath = generatePDF();

                // Compose email body
                String emailBody = composeEmailBody();

                // Send email with attached PDF
                sendEmail(studentEmail, professorEmail, emailBody, pdfFilePath);
            }

            workbook.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static String generatePDF() {
        // Use iText or any other library to generate PDF
        // Return the file path of the generated PDF
        return "example.pdf";
    }

    private static String composeEmailBody() {
        // Compose email body using a template
        return "Dear [Recipient],\n\nPlease find attached the document.\n\nBest regards,\n[Your Name]";
    }

    private static void sendEmail(String studentEmail, String professorEmail, String emailBody, String pdfFilePath) {
        // Email configuration
        String host = "smtp.example.com"; // Your SMTP host
        String username = "yourusername"; // Your SMTP username
        String password = "yourpassword"; // Your SMTP password
        String from = "you@example.com"; // Sender email address

        Properties props = new Properties();
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.host", host);
        props.put("mail.smtp.port", "587");

        // Authenticate the session
        Session session = Session.getInstance(props, new Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(username, password);
            }
        });

        try {
            // Create a new message
            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress(from));
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(studentEmail)); // Set recipient to student
            message.setSubject("Your Subject Here");

            // Create the email body part
            BodyPart messageBodyPart = new MimeBodyPart();
            messageBodyPart.setText(emailBody);

            // Create the attachment
            MimeBodyPart attachmentBodyPart = new MimeBodyPart();
            attachmentBodyPart.attachFile(pdfFilePath);

            // Create multipart email
            Multipart multipart = new MimeMultipart();
            multipart.addBodyPart(messageBodyPart);
            multipart.addBodyPart(attachmentBodyPart);

            // Set the email content
            message.setContent(multipart);

            // Send the message
            Transport.send(message);

            System.out.println("Email sent to " + studentEmail);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

