/*
public class Semaphore {
  private int count;

  public Semaphore(int initCount) {
    this.count = initCount;
  }

  public synchronized int getCount() {
    return count;
  }

  public synchronized boolean trySemDown() {
    if (count > 0) {
      semDown();
      return true;
    }
    return false;
  }

  public synchronized void semDown() {
    while (count-- <= 0) {
      try {
        wait();
      } catch (InterruptedException e) {
        // Restore the interrupted status
        Thread.currentThread().interrupt();
        // Log the interruption and break the loop
        System.err.println("Thread interrupted; semaphore integrity compromised.");
        break;
      }
    }
  }

  public synchronized void semUp() {
    if (++count > 0) {
      notifyAll(); // Use notifyAll() to wake up all waiting threads
    }
  }
}
*/
