/*


objects.sort(Comparator.comparing(MyObject::getFirstParam)
                .thenComparing(Comparator.comparing(MyObject::getSecondParam).reversed()));

objects.sort(Comparator.comparing(MyObject::getFirstParam)
                .thenComparing(Comparator.comparing(MyObject::getSecondParam).reversed()));

objects.sort(Comparator.comparing(MyObject::getFirstParam)
                .thenComparing(MyObject::getSecondParam)
                .reversed());

objects.sort(Comparator.comparing(MyObject::getFirstParam, Comparator.nullsLast(String::compareTo))
                .thenComparing(MyObject::getSecondParam));

public class Semaphore {
  private int count;

  public Semaphore(int initCount) {
    this.count = initCount;
  }

  public synchronized int getCount() {
    return count;
  }

  public synchronized boolean trySemDown() {
    if (count > 0) {
      semDown();
      return true;
    }
    return false;
  }

  public synchronized void semDown() {
    while (count-- <= 0) {
      try {
        wait();
      } catch (InterruptedException e) {
        // Restore the interrupted status
        Thread.currentThread().interrupt();
        // Log the interruption and break the loop
        System.err.println("Thread interrupted; semaphore integrity compromised.");
        break;
      }
    }
  }

  public synchronized void semUp() {
    if (++count > 0) {
      notifyAll(); // Use notifyAll() to wake up all waiting threads
    }
  }
}

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.*;
import java.nio.file.*;
import java.util.ArrayList;
import java.util.List;

public class ResultsProcessor {

    private static final String FILE_NAME = "Results.xlsx";
    private static final String RENAMED_FILE_NAME = "Results.v1.xlsx";
    private static final String NEW_FILE_NAME = "Results_new.xlsx";
    private static final String NO_VALUE = "NO";
    private static final String YES_VALUE = "YES";

      LocalDateTime now = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyyMMdd_HHmm");
        String formattedDateTime = now.format(formatter);
        String newFileName = "Results_" + formattedDateTime + ".xlsx";

        try {
            // Rename the file
            Files.move(Paths.get(ORIGINAL_FILE_NAME), Paths.get(newFileName), StandardCopyOption.REPLACE_EXISTING);
            System.out.println("File renamed to: " + newFileName);
        } catch (IOException e) {
            e.printStackTrace();
        }

    public static void main(String[] args) {
        File file = new File(FILE_NAME);

        if (!file.exists()) {
            System.out.println("File does not exist.");
            return;
        }

        try (FileInputStream fis = new FileInputStream(file);
             Workbook workbook = new XSSFWorkbook(fis)) {

            Sheet sheet = workbook.getSheetAt(0);
            boolean foundNo = false;
            List<String> noRowsFirstColumnValues = new ArrayList<>();
            List<Row> yesRows = new ArrayList<>();
            List<Row> noRows = new ArrayList<>();

            // Iterate over the rows to find "NO" and "YES"
            for (Row row : sheet) {
                Cell cell = row.getCell(2); // 3rd column is index 2
                if (cell != null && cell.getStringCellValue().equals(NO_VALUE)) {
                    foundNo = true;
                    noRows.add(row);
                    noRowsFirstColumnValues.add(row.getCell(0).getStringCellValue());
                } else if (cell != null && cell.getStringCellValue().equals(YES_VALUE)) {
                    yesRows.add(row);
                }
            }

            if (foundNo) {
                // Rename the existing file
                Files.move(Paths.get(FILE_NAME), Paths.get(RENAMED_FILE_NAME), StandardCopyOption.REPLACE_EXISTING);

                // Create a new Results file with only "YES" rows
                try (Workbook newWorkbook = new XSSFWorkbook()) {
                    Sheet newSheet = newWorkbook.createSheet("Results");

                    // Copy "YES" rows
                    int rowIndex = 0;
                    for (Row yesRow : yesRows) {
                        Row newRow = newSheet.createRow(rowIndex++);
                        copyRow(yesRow, newRow);
                    }

                    // Append "NO" rows to the new Results file
                    for (Row noRow : noRows) {
                        Row newRow = newSheet.createRow(rowIndex++);
                        copyRow(noRow, newRow);
                    }

                    // Write to the new file
                    try (FileOutputStream fos = new FileOutputStream(NEW_FILE_NAME)) {
                        newWorkbook.write(fos);
                    }
                }

                // Continue with other tasks using the data from "NO" rows
                System.out.println("Processing complete. First column values of 'NO' rows:");
                for (String value : noRowsFirstColumnValues) {
                    System.out.println(value);
                }

            } else {
                System.out.println("No rows with 'NO' found. No new file created.");
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void copyRow(Row sourceRow, Row targetRow) {
        for (int i = 0; i < sourceRow.getLastCellNum(); i++) {
            Cell oldCell = sourceRow.getCell(i);
            Cell newCell = targetRow.createCell(i);

            if (oldCell == null) {
                newCell.setCellValue("");
                continue;
            }

            switch (oldCell.getCellType()) {
                case STRING:
                    newCell.setCellValue(oldCell.getStringCellValue());
                    break;
                case NUMERIC:
                    newCell.setCellValue(oldCell.getNumericCellValue());
                    break;
                case BOOLEAN:
                    newCell.setCellValue(oldCell.getBooleanCellValue());
                    break;
                case FORMULA:
                    newCell.setCellFormula(oldCell.getCellFormula());
                    break;
                default:
                    newCell.setCellValue("");
            }
        }
    }
}

---

*/public interface ProcessLauncher {
    void command(String... strs);
    Process start() throws IOException;
}

private static final int EXIT_SUCCESS = 0;
private final Supplier<ProcessLauncher> processLauncherSupplier = this::createProcessLauncher;

public boolean runProcess(String shellCommand, String processDisplayName) {
    ProcessLauncher processLauncher = processLauncherSupplier.get();
    processLauncher.command("bash", "-c", shellCommand);
    Process process = null;
    try {
        process = processLauncher.start();
        int exitVal = process.waitFor(); // This line should throw InterruptedException
        return EXIT_SUCCESS == exitVal;
    } catch (InterruptedException e) {
        // Restore the interrupted status
        Thread.currentThread().interrupt();
        log.error("Process was interrupted: " + e.getMessage(), e);
        return false;
    } catch (IOException e) {
        log.error("I/O error occurred while running the process: " + e.getMessage(), e);
        return false;
    } finally {
        if (process != null) {
            try {
                process.destroy();
            } catch (Throwable t) {
                log.error("Cannot destroy process: " + t.getMessage(), t);
            }
        }
    }
}


////
public boolean runProcess(String shellCommand, String processDisplayName) {
    ProcessLauncher processLauncher = processLauncherSupplier.get();
    processLauncher.command("bash", "-c", shellCommand);
    Process process = null;
    try {
        process = processLauncher.start();
        int exitVal = process.waitFor(); // This line throws InterruptedException
        return EXIT_SUCCESS == exitVal;
    } catch (InterruptedException e) {
        // Restore the interrupted status
        Thread.currentThread().interrupt();
        log.error("Process was interrupted: " + e.getMessage(), e);
        return false;
    } catch (IOException e) {
        log.error("I/O error occurred while running the process: " + e.getMessage(), e);
        return false;
    } catch (Exception e) { // Catch all other exceptions
        log.error("Unexpected error while running the process: " + e.getMessage(), e);
        return false;
    } finally {
        if (process != null) {
            try {
                process.destroy();
            } catch (Exception e) {
                log.error("Cannot destroy process: " + e.getMessage(), e);
            }
        }
    }
}
//
public boolean runProcess(String shellCommand, String processDisplayName) {
    ProcessLauncher processLauncher = processLauncherSupplier.get();
    processLauncher.command("bash", "-c", shellCommand);
    Process process = null;
    try {
        process = processLauncher.start();
        int exitVal = process.waitFor(); // This line throws InterruptedException
        return EXIT_SUCCESS == exitVal;
    } catch (InterruptedException e) {
        // Restore the interrupted status
        Thread.currentThread().interrupt();
        log.error("Process was interrupted: " + e.getMessage(), e);
        return false;
    } catch (IOException e) {
        log.error("I/O error occurred while running the process: " + e.getMessage(), e);
        return false;
    } catch (Throwable t) {
        log.error("Unexpected throwable caught while running the process: " + t.getMessage(), t);
        return false;
    } finally {
        if (process != null) {
            try {
                process.destroy();
            } catch (Throwable t) {
                log.error("Cannot destroy process: " + t.getMessage(), t);
            }
        }
    }
}

@Override
public boolean equals(Object obj) {
    // Check if the current object is compared with itself
    if (this == obj) {
        return true;
    }

    // Check if the other object is an instance of the same class
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }

    // Cast the object to the current class type
    YourClassName other = (YourClassName) obj;

    // Compare the fields for equality
    // Assuming 'f' is not null, use its equals method to compare
    return f.equals(other.f);
}

// The hashCode method is already provided
@Override
public int hashCode() {
    return f.hashCode();
}


@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    YourClassName other = (YourClassName) obj;
    return f != null ? f.equals(other.f) : other.f == null;
}

@Override
public int hashCode() {
    return f != null ? f.hashCode() : 0;
}

Optional<String> result = Optional.ofNullable(objectReference)
                                   .map(obj -> obj.get());  // Assuming 'get()' is safe to call
if (result.isPresent()) {
    // do something
}

private void readAndWrite(Function<String, Boolean> processingCondition,
                          Function<String, Optional<String>> manipulationFunction,
                          boolean append) throws IOException {
    // Check if the processingCondition and manipulationFunction are null
    if (processingCondition == null || manipulationFunction == null) {
        throw new IllegalArgumentException("processingCondition and manipulationFunction cannot be null");
    }

    try (BufferedReader reader = new BufferedReader(new FileReader(source));
         BufferedWriter writer = new BufferedWriter(new FileWriter(target, append))) {
        
        int i = 0;
        String line;
        
        while ((line = reader.readLine()) != null) {
            // Safely apply the processing condition, ensure it's not null
            Boolean conditionResult = processingCondition.apply(line);
            if (conditionResult != null && conditionResult) {
                // Safely apply the manipulation function, ensure it returns a valid Optional
                Optional<String> result = Optional.ofNullable(manipulationFunction.apply(line))
                                                  .orElse(Optional.empty());
                
                if (result.isPresent()) {
                    if (i > 0 || append) {
                        writer.newLine();
                    }
                    writer.write(result.get());
                    if (++i % 100 == 0) {
                        log.info("Written {} items", i);  // corrected logging syntax
                    }
                }
            }
        }
    }
}

To Summarize:
Optional is designed to represent "a value that might be absent." It is an explicit way to handle situations where you might or might not have a value.

Optional.of() expects a non-null value and will throw an exception if a null is passed to it. It's useful when you're sure the value exists.

Optional.ofNullable() is designed to handle null values gracefully. It ensures that even if the value passed is null, you won’t get a NullPointerException, but instead, you'll get Optional.empty().

Why Optional.ofNullable() is safer: It is crucial when you want to wrap values that might be null, because it converts null into Optional.empty(), ensuring that subsequent operations on the Optional are safe and won’t throw NullPointerException.

Why Use Optional at All?
Optional helps clarify the intent of your methods: it makes it explicit that a value might be absent, which encourages callers to handle the case of missing values properly.
It avoids null checks and makes code more readable by using Optional methods like isPresent(), ifPresent(), and orElse(), instead of manual null-checking.
Conclusion:
Optional is useful to represent a value that might be missing (absent).
Optional.ofNullable() is necessary to handle cases where a value could be null. It turns null into Optional.empty(), preventing NullPointerException.
Using Optional doesn’t automatically wrap a null value—you need to ensure that you’re using Optional.ofNullable() or other null-safe mechanisms when dealing with potentially null values.

@Bean
public Map<String, Object> params() {
    Map<String, Object> params = new HashMap<>();
    params.put("locale", Arrays.asList(Locale.getISOCountries()));
    return params;
}

Step 1: Define a Map Bean
You can extract the params map into its own bean to be reused.

@Bean
public Map<String, Object> params() {
    Map<String, Object> params = new HashMap<>();
    params.put("locale", Arrays.asList(Locale.getISOCountries()));
    return params;
}
Step 2: Define your first DataClass Bean using the Map Bean
You can now inject this Map into the first DataClass bean.

@Bean
public DataClass dataOne(@Qualifier("someQualifier") String query, Map<String, Object> params) {
    return new DataClass("address", query, params);
}
Step 3: Define another DataClass Bean
Now, if you need to create a second DataClass bean, you can reuse the same params object from the params() bean.

@Bean
public DataClass dataTwo(@Qualifier("anotherQualifier") String query, Map<String, Object> params) {
    return new DataClass("otherAddress", query, params);
}
Key Points:
Reusability: The params map is defined as a separate bean, and both DataClass beans can reuse it.
Clear Dependency Management: Each DataClass is initialized independently, but the shared params bean ensures that both instances get the same map.
Avoids Name Collision: You can have multiple beans (dataOne and dataTwo) that use the same shared params bean without naming conflicts.
//
//
String something = String.join(";", 
    getName(), 
    getCity(), 
    getAddress(), 
    getOtherInfo() != null ? getOtherInfo() : ""
);
In this code, if getOtherInfo() returns null, it will be replaced by an empty string "", and the rest of the values will be concatenated with a semicolon ; separator.

2. Exclude the null value
If you want to completely exclude null values (so the getOtherInfo() part won't contribute to the resulting string), you can filter out null values like this:

java
Code kopieren
String something = String.join(";", 
    Stream.of(getName(), getCity(), getAddress(), getOtherInfo())
          .filter(Objects::nonNull)
          .toArray(String[]::new)
);//

//
1. Treat empty strings as null (or exclude them)
If getOtherInfo() returns an empty string, you can treat it as null and exclude it:

java
Code kopieren
String something = String.join(";", 
    Stream.of(getName(), getCity(), getAddress(), getOtherInfo())
          .filter(info -> info != null && !info.isEmpty())  // Filter out null and empty strings
          .toArray(String[]::new)
);
2. Replace empty strings with a placeholder (e.g., a single space " " or "-")
Alternatively, if you want to retain the position of the getOtherInfo() but replace empty strings with some placeholder (like a space or dash), you can do this:

java
Code kopieren
String something = String.join(";", 
    getName(), 
    getCity(), 
    getAddress(), 
    getOtherInfo() != null && !getOtherInfo().isEmpty() ? getOtherInfo() : " "  // Replace empty with a space
);
This way, if getOtherInfo() is an empty string, it will be replaced by a space " " or any other placeholder you choose, which Excel can handle more gracefully.

3. Remove only empty strings, but keep null (if you want nulls to be present):
java
Code kopieren
String something = String.join(";", 
    Stream.of(getName(), getCity(), getAddress(), getOtherInfo())
          .map(info -> info != null && info.isEmpty() ? " " : info)  // Replace empty with space, keep null as null
          .toArray(String[]::new)
);
Which Approach to Use:
If Excel needs some non-empty content, replace empty strings with something meaningful, like " " or "-".
If you don't mind excluding empty fields, filter them out.
This should solve the issue with empty strings causing problems when writing to Excel.//
